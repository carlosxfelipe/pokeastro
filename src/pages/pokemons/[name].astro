---
import type { GetStaticPaths } from "astro";
import type { PokemonListResponse } from "../../interfaces/pokemon-list.response";
import MainLayout from "../../layouts/MainLayout.astro";
import PokemonCard from "../../components/pokemons/PokemonCard.astro";
import Title from "@components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const resp = await fetch("https://pokeapi.co/api/v2/pokemon/?limit=151");
  const { results } = (await resp.json()) as PokemonListResponse;

  // return [
  //   {
  //     params: { name: "bulbasaur" },
  //     props: {name: "bulbasaur", url: "https://pokeapi.co/api/v2/pokemon/1/"}
  //   }
  // ];

  return results.map((result) => ({
    params: { name: result.name },
    props: { name: result.name, url: result.url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioUrl = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokémon - #${id} ${name}`}
  description={`Informação sobre o pokémon ${name}`}
  image={imageUrl}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex flex-row">
      <div>
        <button onclick="history.back()" class="text-blue-500">Voltar</button>
        <Title>{name}</Title>
      </div>
      <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
        <Icon data-outline name="heart-outline" size={50} color={"red"} />
        <Icon
          data-full
          class="hidden"
          name="heart-filled"
          size={50}
          color={"red"}
        />
      </button>
    </div>
    <PokemonCard name={name} url={url} isBig />
    <audio controls class="mt-5">
      <source src={audioUrl} type="audio/ogg" />
    </audio>
  </section>
</MainLayout>

<script>
  interface FavoritePokemon {
    name: string;
    id: number;
  }

  // document.addEventListener("astro:before-preparation", () => {
  //   console.log("astro:before-preparation");
  // });

  // document.addEventListener("astro:after-preparation", () => {
  //   console.log("astro:after-preparation");
  // });

  // document.addEventListener("astro:before-swap", () => {
  //   console.log("astro:before-swap");
  // });

  // document.addEventListener("astro:after-swap", () => {
  //   console.log("astro:after-swap");
  // });

  // document.addEventListener("astro:page-load", () => {
  //   console.log("astro:page-load");
  // });

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? "";

    const heartOutline = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;
    const heartFilled = btnFavorite.querySelector("[data-full]") as HTMLElement;

    const isFavorite = favoritePokemons.some((fav) => fav.name === name);

    if (isFavorite) {
      heartOutline.classList.add("hidden");
      heartFilled.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((fav) => fav.name === name);

      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name);
      } else {
        favoritePokemons.push({
          id: +id,
          name: name,
        });
      }

      localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
    };

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFilled.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>
